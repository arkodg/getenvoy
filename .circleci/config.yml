# Copyright 2019 Tetrate
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2.1

executors:
  builder:
    docker:
      - image: circleci/golang:1.13.3

  e2e_vm_linux:
    machine:
      # See https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # Ubuntu 16.04, docker 19.03.8, docker-compose 1.25.5
      image: ubuntu-1604:202004-01

jobs:
  lint:
    executor: builder
    environment:
      # Run garbage collection more aggresively to avoid getting OOMed during the lint phase.
      GOGC: "20"
      # Circle CI executor has many cores (> 30) but throttles CPU and RAM. If we don't limit
      # this to the number of allocated cores, the job is likely to get OOMed and killed.
      GOMAXPROCS: "2"
    steps:
      - checkout
      - run: make init
      - run: ./ci/install-lint
      - run: ./ci/lint
          
  test:
    executor: builder
    steps:
      - checkout
      - run: make init
      - run: ./ci/install-envoy
      - run: ./ci/test
      - run:
          name: "Measure test coverage (for now, on a subset of tests)"
          command: make coverage GO_COVERAGE_EXTRA_OPTS="-p 1"
      - store_artifacts:
          path: build/coverage
          destination: /coverage

  bin:
    executor: builder
    steps:
      - checkout
      - run: make init
      - run:
          name: "Build `getenvoy` and `e2e` binaries for use in e2e tests"
          command: make bin
      # share `getenvoy` and `e2e` binaries with the downstream jobs
      - persist_to_workspace:
          root: build
          paths:
            - bin

  e2e_linux:
    executor: e2e_vm_linux
    steps:
      - checkout
      # re-use `getenvoy` and `e2e` binaries built by the upstream job
      - attach_workspace:
          at: build
      # re-use caches generated by extension build containers, e.g. Cargo cache
      - restore_cache:
          keys:
          # prefer cache on the same branch
          - getenvoy-{{ .Branch }}
          # otherwise, fallback to the most recently generated cache on any branch
          - getenvoy-
      - run:
          name: "Build language-specific Docker build images"
          command: make builders
      # add SSH keys that will be used by build containers to fetch private dependencies
      - add_ssh_keys:
          fingerprints:
            # Key of a GitHub "machine user" that has access to all private repositories needed by e2e tests:
            #   user:           https://github.com/getenvoy-ci
            #   key fingeprint: MD5:ae:8d:18:6a:1b:44:17:dc:b8:c8:0f:a9:48:44:be:2b
            #
            # See https://developer.github.com/v3/guides/managing-deploy-keys/#machine-users
            # See https://circleci.com/docs/2.0/add-ssh-key
            - "ae:8d:18:6a:1b:44:17:dc:b8:c8:0f:a9:48:44:be:2b"
      - run:
          name: "Run e2e tests using `getenvoy` and `e2e` binaries built by the upstream job"
          environment:
            # run e2e tests on a `getenvoy` binary built by the upstream job
            E2E_GETENVOY_BINARY: /home/circleci/project/build/bin/linux/amd64/getenvoy
          # run e2e tests using `e2e` binary built by the upstream job
          command: |
              # use a dedicated SSH Agent to manage the keys needed by extension build containers
              eval $(ssh-agent -s)
              # always kill that SSH Agent in the end
              trap "ssh-agent -k" EXIT
              # load a single key of a GitHub "machine user" that has access to all private repositories needed by e2e tests
              # here, we rely on Circle CI using a predictable file name (based on MD5 fingeprint of a key)
              ssh-add $HOME/.ssh/id_rsa_ae8d186a1b4417dcb8c80fa94844be2b

              # make sure the cache directory is first created on behalf of the current user
              mkdir -p /tmp/cache/getenvoy
              # correct permissions if necessary
              sudo chown -R $(id -u):$(id -g) /tmp/cache/getenvoy

              # to speed up `getenvoy extension build|test`, re-use a single cache across all extensions created by e2e tests
              export E2E_BUILTIN_TOOLCHAIN_CONTAINER_OPTIONS="${E2E_BUILTIN_TOOLCHAIN_CONTAINER_OPTIONS} -v /tmp/cache/getenvoy:/tmp/cache/getenvoy -e CARGO_HOME=/tmp/cache/getenvoy/extension/rust-builder/cargo"
              # forward SSH Agent into extension build containers so that to they could fetch source code from private GitHub repositories
              export E2E_BUILTIN_TOOLCHAIN_CONTAINER_OPTIONS="${E2E_BUILTIN_TOOLCHAIN_CONTAINER_OPTIONS} -v ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK} -e SSH_AUTH_SOCK"

              # run e2e tests with '-ginkgo.v' flag to be able to see the progress
              build/bin/linux/amd64/e2e -ginkgo.v
      # save caches generated by extension build containers, e.g. Cargo cache
      - save_cache:
          key: getenvoy-{{ .Branch }}
          paths:
          - "/tmp/cache/getenvoy"

  release:
    executor: builder
    steps:
      - checkout
      - run: make init
      - setup_remote_docker
      - run: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run: curl -sL https://git.io/goreleaser | bash

workflows:
  version: 2
  commit:
    jobs:
      - lint
      - test
      - bin
      - e2e_linux:
          requires:
            - bin
  release:
    jobs:
      - release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
